===============================================================================
🚀 EXPO ROUTER STRUCTURE DOCUMENTATION
===============================================================================
React Native/Expo Project Layout System Guide
Created for: Fapulous App Structure Understanding

===============================================================================
📁 1. FILE STRUCTURE DIAGRAM
===============================================================================

📁 src/app/ (Expo Router Directory)
│
├── 📄 _layout.tsx                 # 🔑 ROOT LAYOUT (replaces App.js)
│   ├── Stack Navigator
│   ├── Global Providers
│   └── Theme Setup
│
├── 📁 (app)/                     # 🏠 AUTHENTICATED APP GROUP
│   ├── 📄 _layout.tsx            # 🧭 TAB NAVIGATION LAYOUT
│   │   ├── Authentication Guards
│   │   └── Bottom Tabs Setup
│   ├── 📄 index.tsx              # 📱 Feed Screen (Tab 1)
│   ├── 📄 style.tsx              # 🎨 Style Screen (Tab 2)
│   └── 📄 settings.tsx           # ⚙️ Settings Screen (Tab 3)
│
├── 📁 feed/                      # 📝 FEED-RELATED MODALS
│   ├── 📄 [id].tsx               # 📖 Post Detail (Dynamic Route)
│   └── 📄 add-post.tsx           # ➕ Add Post Modal
│
├── 📄 login.tsx                  # 🔐 Login Screen
├── 📄 onboarding.tsx             # 👋 Onboarding Screen
└── 📄 [...missing].tsx           # ❓ 404 Fallback

===============================================================================
🔄 2. NAVIGATION FLOW DIAGRAM
===============================================================================

🚀 APP LAUNCH
     │
     ▼
┌─────────────────┐
│   ROOT LAYOUT   │ ◄── Global Providers Setup
│   (_layout.tsx) │     • GestureHandler
└─────────────────┘     • Keyboard
     │                  • Theme
     ▼                  • API
┌─────────────────┐     • Modals
│  AUTHENTICATION │
│     CHECK       │
└─────────────────┘
     │
     ▼
    ┌───┐
    │ ? │ Is First Time?
    └─┬─┘
      │
  ┌───▼────NO───────┐
  │                 │
  YES               ▼
  │            ┌─────────┐
  │            │ Signed  │
  │            │   In?   │
  │            └────┬────┘
  │                 │
  ▼             ┌───▼────NO───┐
┌──────────┐    │             │
│ONBOARDING│    YES           ▼
│ SCREEN   │    │        ┌────────┐
└──────────┘    │        │ LOGIN  │
  │             │        │ SCREEN │
  │             ▼        └────────┘
  │      ┌─────────────┐      │
  │      │ TAB LAYOUT  │      │
  │      │ (app group) │      │
  │      └─────────────┘      │
  │             │             │
  └─────────────┼─────────────┘
                ▼
    ┌─────────────────────┐
    │   BOTTOM TABS       │
    │  ┌─────┬─────┬─────┐│
    │  │FEED │STYLE│SET..││
    │  │(idx)│     │     ││
    │  └─────┴─────┴─────┘│
    └─────────────────────┘
                │
                ▼
      ┌─────────────────┐
      │   MODAL ROUTES  │
      │ ┌─────────────┐ │
      │ │/feed/add-post│ │
      │ │/feed/[id]   │ │
      │ └─────────────┘ │
      └─────────────────┘

===============================================================================
🏗️ 3. PROVIDER HIERARCHY DIAGRAM
===============================================================================

🏗️ PROVIDER STACK (Bottom to Top)
│
└── 🎯 GestureHandlerRootView
    │   • Handles all gestures
    │   • Root container styling
    │   • Dark/light class application
    │
    └── ⌨️ KeyboardProvider
        │   • Keyboard-aware scrolling
        │   • Input field management
        │
        └── 🎨 ThemeProvider (React Navigation)
            │   • Navigation theming
            │   • Header/tab bar colors
            │
            └── 🌐 APIProvider
                │   • React Query setup
                │   • API configuration
                │
                └── 📱 BottomSheetModalProvider
                    │   • Modal system
                    │   • Bottom sheet management
                    │
                    └── 💬 FlashMessage
                        │   • Global notifications
                        │   • Toast messages
                        │
                        └── 🧭 NAVIGATION CHILDREN
                            │   Stack/Tab Navigators
                            └── Screen Components

===============================================================================
🔐 4. AUTHENTICATION FLOW DECISION TREE
===============================================================================

📱 USER OPENS APP
        │
        ▼
    ┌───────┐
    │ Start │
    └───┬───┘
        │
        ▼
┌───────────────┐     YES    ┌─────────────┐
│ isFirstTime?  ├──────────→ │ ONBOARDING  │
└───────┬───────┘            │   SCREEN    │
        │                    └─────────────┘
        │ NO                         │
        ▼                           │
┌───────────────┐                   │
│ Auth Status?  │                   │
└───────┬───────┘                   │
        │                           │
    ┌───▼───┐                       │
    │       │                       │
┌───▼───┐ ┌─▼──────┐               │
│signOut│ │signedIn│               │
└───┬───┘ └─┬──────┘               │
    │       │                       │
    ▼       ▼                       │
┌───────┐ ┌─────────────────────┐   │
│ LOGIN │ │    TAB NAVIGATION   │   │
│SCREEN │ │  ┌─────┬─────┬─────┐│   │
└───────┘ │  │FEED │STYLE│SET..││   │
          │  └─────┴─────┴─────┘│   │
          └─────────────────────┘   │
                    │               │
                    └───────────────┘
                           │
                           ▼
                   ┌─────────────┐
                   │ MAIN APP    │
                   │ EXPERIENCE  │
                   └─────────────┘

===============================================================================
🌳 5. ROUTE STRUCTURE HIERARCHY
===============================================================================

🌳 ROUTE TREE
│
├── 🔗 / (Root Stack)
│   │
│   ├── 📁 (app)/ ────────────────┐
│   │   │                        │ (Route Group - Hidden in URL)
│   │   ├── 🏠 index/             │ → /
│   │   ├── 🎨 style/             │ → /style  
│   │   └── ⚙️ settings/          │ → /settings
│   │                             │
│   ├── 📝 feed/                  │
│   │   ├── 🆔 [id]/              │ → /feed/123
│   │   └── ➕ add-post/          │ → /feed/add-post
│   │                             │
│   ├── 🔐 login/                 │ → /login
│   ├── 👋 onboarding/            │ → /onboarding
│   └── ❓ [...missing]/          │ → /any-404-route
│
└── 🎯 URL MAPPING EXAMPLES:
    │
    ├── / ──────────────────────→ Feed Tab (index)
    ├── /style ─────────────────→ Style Tab
    ├── /settings ──────────────→ Settings Tab
    ├── /feed/add-post ─────────→ Add Post Modal
    ├── /feed/123 ──────────────→ Post Detail Modal
    ├── /login ─────────────────→ Login Screen
    ├── /onboarding ────────────→ Onboarding Screen
    └── /invalid-route ─────────→ 404 Screen

===============================================================================
📱 6. SCREEN TRANSITION FLOW
===============================================================================

📱 SCREEN TRANSITIONS

🚀 App Launch
    │
    ▼
┌─────────────┐    First Time     ┌─────────────┐
│ Splash      │ ────────────────→ │ Onboarding  │
│ Screen      │                   │ Screen      │
└─────────────┘                   └─────────────┘
    │                                     │
    │ Returning User                      │ Complete Setup
    ▼                                     ▼
┌─────────────┐    Signed Out     ┌─────────────┐
│ Tab Layout  │ ←────────────────  │ Login       │
│ Guard       │                   │ Screen      │
└─────────────┘                   └─────────────┘
    │                                     │
    │ Authenticated                       │ Sign In
    ▼                                     ▼
┌─────────────┐                   ┌─────────────┐
│ MAIN TABS   │ ←─────────────────│ Success     │
│ ┌─────────┐ │                   │ Redirect    │
│ │Feed│Sty│ │                   └─────────────┘
│ └─────────┘ │
└─────────────┘
    │
    │ Tab Navigation
    ▼
┌─────────────┐    Create Post    ┌─────────────┐
│ Feed Screen │ ────────────────→ │ Add Post    │
│ (FlashList) │                   │ Modal       │
└─────────────┘                   └─────────────┘
    │                                     │
    │ Tap Post                            │ Submit/Cancel
    ▼                                     ▼
┌─────────────┐                   ┌─────────────┐
│ Post Detail │                   │ Back to     │
│ Modal       │                   │ Feed        │
└─────────────┘                   └─────────────┘

===============================================================================
🔍 7. ROOT _LAYOUT.TSX CODE BREAKDOWN
===============================================================================

📄 FILE: src/app/_layout.tsx

🔧 SECTION 1: IMPORTS (Lines 1-16)
=======================================
// Import global CSS file
import '../../global.css';

import { BottomSheetModalProvider } from '@gorhom/bottom-sheet';
import { ThemeProvider } from '@react-navigation/native';
import { Stack } from 'expo-router';
import * as SplashScreen from 'expo-splash-screen';
// ... more imports

🤔 EXPLANATION:
- global.css = Basic styling for entire app
- Stack = Navigation organizer (like a stack of papers)
- Various Providers = Special wrappers that give app superpowers
- Each import brings in tools/features the app needs

⚙️ SECTION 2: CONFIGURATION (Lines 18-31)
===========================================
export const unstable_settings = {
  initialRouteName: '(app)',  // 🎯 "Start with (app) folder"
};

hydrateAuth();              // 🔐 "Remember login status"
loadSelectedTheme();        // 🎨 "Remember theme preference"
SplashScreen.preventAutoHideAsync(); // ⏱️ "Don't hide loading screen yet"

🧭 SECTION 3: MAIN LAYOUT (Lines 33-42)
=========================================
export default function RootLayout() {
  return (
    <Providers>           // 🏗️ Wrap everything with superpowers
      <Stack>             // 📚 Create navigation stack
        <Stack.Screen name="(app)" options={{ headerShown: false }} />
        <Stack.Screen name="onboarding" options={{ headerShown: false }} />
        <Stack.Screen name="login" options={{ headerShown: false }} />
      </Stack>
    </Providers>
  );
}

🔗 FILE CONNECTIONS:
- name="(app)" → Points to src/app/(app)/_layout.tsx
- name="onboarding" → Points to src/app/onboarding.tsx  
- name="login" → Points to src/app/login.tsx

🪆 SECTION 4: PROVIDERS (Lines 44-65)
======================================
function Providers({ children }: { children: React.ReactNode }) {
  const theme = useThemeConfig();
  return (
    <GestureHandlerRootView>     // 👆 Handle gestures
      <KeyboardProvider>         // ⌨️ Keyboard awareness
        <ThemeProvider>          // 🌙 Theme management
          <APIProvider>          // 🌐 Internet requests
            <BottomSheetModalProvider>  // 📱 Modal popups
              {children}         // 🎯 App screens go here
              <FlashMessage />   // 💬 Notifications
            </BottomSheetModalProvider>
          </APIProvider>
        </ThemeProvider>
      </KeyboardProvider>
    </GestureHandlerRootView>
  );
}

🪆 PROVIDER NESTING (Like Russian Dolls):
Each provider wraps the next, adding a special ability:
1. GestureHandler → "I can detect swipes and taps"
2. KeyboardProvider → "I know when keyboard appears"
3. ThemeProvider → "I manage dark/light themes"
4. APIProvider → "I handle internet data"
5. BottomSheet → "I show popup modals"
6. FlashMessage → "I show notifications"

===============================================================================
🔄 8. HOW FILES CONNECT TOGETHER
===============================================================================

📱 STEP 1: APP STARTS
======================
User opens app
     ↓
🏗️ _layout.tsx runs first (foundation)
     ↓
⚙️ Sets up all providers (superpowers)
     ↓
🧭 Creates Stack navigation

📋 STEP 2: NAVIGATION DECISION
===============================
App checks: Where should I go?
     ↓
📋 Looks at initialRouteName: '(app)'
     ↓
📁 Goes to src/app/(app)/_layout.tsx

🔐 STEP 3: AUTHENTICATION CHECK
================================
📁 (app)/_layout.tsx runs
     ↓
🔐 Checks: Is user logged in?
     ↓
     ├── ❌ First time? → onboarding.tsx
     ├── ❌ Logged out? → login.tsx  
     └── ✅ Logged in? → Tab navigation

📱 STEP 4: SCREEN DISPLAY
==========================
✅ User is authenticated
     ↓
🧭 (app)/_layout.tsx shows bottom tabs
     ↓
📱 User sees: Feed | Style | Settings
     ↓
🎯 User taps Feed → shows index.tsx

===============================================================================
🎯 9. REAL-WORLD EXAMPLE: NEW USER FLOW
===============================================================================

📱 SCENARIO: Brand New User Opens App

1. 📱 User taps app icon
   ↓
2. 🏗️ _layout.tsx starts running
   ↓ 
3. ⚙️ All providers wrap the app (themes, keyboard, etc.)
   ↓
4. 🧭 Stack navigation created with 3 screens available
   ↓
5. 📋 App says "Go to (app) first" (initialRouteName)
   ↓
6. 📁 App opens (app)/_layout.tsx
   ↓
7. 🔐 (app)/_layout.tsx checks: "Is this user's first time?"
   ↓
8. ✅ YES! → Redirects to onboarding.tsx
   ↓
9. 👋 User sees onboarding screen
   ↓
10. ✅ User completes onboarding → Goes to login.tsx
    ↓
11. 🔐 User logs in → Goes back to (app)/_layout.tsx
    ↓
12. 🧭 Now shows tab navigation (Feed, Style, Settings)

===============================================================================
🧩 10. PROVIDER BREAKDOWN (THE SUPERPOWERS)
===============================================================================

Each provider gives your app a special ability:

<GestureHandlerRootView>     // 👆 "I can detect swipes and gestures"
  <KeyboardProvider>         // ⌨️ "I know when keyboard shows up"
    <ThemeProvider>          // 🌙 "I can switch dark/light mode"
      <APIProvider>          // 🌐 "I can fetch data from internet"
        <BottomSheetModalProvider>  // 📱 "I can show popups"
          {children}         // 🎯 "Your screens go here"
          <FlashMessage />   // 💬 "I show notifications"
        </BottomSheetModalProvider>
      </APIProvider>
    </ThemeProvider>
  </KeyboardProvider>
</GestureHandlerRootView>

===============================================================================
📊 11. VISUAL FILE RELATIONSHIP
===============================================================================

📁 src/app/
│
├── 🔑 _layout.tsx (ROOT - The foundation file)
│   │   ├── Sets up providers
│   │   ├── Creates Stack navigation  
│   │   └── Points to other screens
│   │
│   └── 🧭 Navigation Routes:
│       │
│       ├── 📁 (app)/_layout.tsx ← Points here FIRST
│       │   └── 🏠 Tab Navigation (Feed, Style, Settings)
│       │
│       ├── 👋 onboarding.tsx ← Redirects here if first time
│       │
│       └── 🔐 login.tsx ← Redirects here if logged out
│
└── 🔄 The Flow:
    _layout.tsx → (app)/_layout.tsx → Auth Check → Show screen

===============================================================================
🤝 12. HOW COMPONENTS COMMUNICATE
===============================================================================

1. _layout.tsx provides "global state" (themes, auth, etc.)
   ↓
2. All child screens can access these through "hooks"
   ↓  
3. Example: Any screen can call useThemeConfig() to get theme
   ↓
4. Example: Any screen can call useAuth() to check login

===============================================================================
💡 13. KEY TAKEAWAYS FOR BEGINNERS
===============================================================================

1. 🏗️ _layout.tsx = The foundation - Everything starts here
2. 🪆 Providers = Superpowers - Each adds functionality  
3. 📚 Stack = Navigation organizer - Tells app which screens exist
4. 📁 File structure = Route structure - Folder names become URLs
5. 🔐 Authentication guards - Checks happen before showing main app
6. 🎯 Modular system - Add new screens by creating new files

===============================================================================
🔧 14. TECHNICAL CONCEPTS EXPLAINED SIMPLY
===============================================================================

📚 STACK NAVIGATION:
Think of screens like a stack of papers. You can:
- Push a new paper on top (navigate to new screen)
- Pop the top paper off (go back)
- Only see the top paper (current screen)

🪆 PROVIDER PATTERN:
Like Russian nesting dolls - each provider wraps the next:
- Outer doll = GestureHandler (can touch)
- Next doll = KeyboardProvider (knows about keyboard)
- Inner doll = Your app screens

🧭 FILE-BASED ROUTING:
- Folder name = URL path
- File name = Screen name
- _layout.tsx = Special file that wraps all files in that folder

🔐 AUTHENTICATION GUARDS:
Like a bouncer at a club:
- Checks if you're allowed in
- Redirects you if you're not
- Lets you through if you are

===============================================================================
📋 15. QUICK REFERENCE GUIDE
===============================================================================

🔍 WANT TO FIND:
- Main app logic? → src/app/_layout.tsx
- Tab navigation? → src/app/(app)/_layout.tsx  
- Feed screen? → src/app/(app)/index.tsx
- Login screen? → src/app/login.tsx
- Theme setup? → src/lib/use-theme-config.tsx

🛠️ WANT TO ADD:
- New screen? → Create new .tsx file in app folder
- New tab? → Add Tabs.Screen in (app)/_layout.tsx
- New provider? → Add to Providers function in _layout.tsx
- New route? → File automatically becomes route

🐛 SOMETHING BROKEN?
- App won't start? → Check _layout.tsx imports
- Navigation not working? → Check Stack.Screen names
- Theme issues? → Check useThemeConfig()
- Auth issues? → Check useAuth() and guards

===============================================================================
📝 END OF DOCUMENTATION
===============================================================================
This structure creates a scalable, maintainable navigation system that grows 
with your app while keeping everything organized and easy to understand.

For more details, check the official Expo Router documentation. 